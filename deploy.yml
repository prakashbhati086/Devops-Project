---
- name: Deploy Website to EC2
  hosts: all
  become: true
  vars:
    docker_user: "{{ docker_user }}"
    docker_pass: "{{ docker_pass }}"
    image_name: "websiteimage"
    commit_hash: "{{ git_commit_hash }}"
    container_name: "webapp"

  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - python3-docker  # ✅ Use system package instead
        state: present

    # ❌ Remove this problematic task:
    # - name: Install Docker Python library
    #   pip:
    #     name: docker
    #     state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Update package cache
      apt:
        update_cache: yes

    - name: Install Docker CE
      apt:
        name: docker-ce
        state: present

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Log in to Docker Hub
      docker_login:
        username: "{{ docker_user }}"
        password: "{{ docker_pass }}"

    - name: Pull Docker image
      docker_image:
        name: "{{ docker_user }}/{{ image_name }}"
        tag: "{{ commit_hash }}"
        source: pull
        force_source: yes

    - name: Stop existing container
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: yes

    - name: Run new container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_user }}/{{ image_name }}:{{ commit_hash }}"
        state: started
        ports:
          - "80:80"
        restart_policy: always

    - name: Wait for container to start
      wait_for:
        port: 80
        host: "{{ inventory_hostname }}"
        delay: 10
        timeout: 60

    - name: Test website
      uri:
        url: "http://{{ inventory_hostname }}"
        method: GET
        status_code: 200
      delegate_to: localhost
      retries: 3
      delay: 5
